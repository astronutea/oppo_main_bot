import asyncio
import logging

from aiogram import Bot, Dispatcher, types, exceptions
from aiogram import F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

from config import BOT_TOKEN
from db_request import registration_ref
from keyboards import main_kb

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


@dp.message(Command(commands=["start"]))
async def start_command(message: Message, command: CommandObject):
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
    command_args: str = command.args
    try:
        await message.answer("–ü—Ä–∏–≤–µ—Ç!\n\n"
                             "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É <em><b>–ö—Ä–µ–ø–∫–∏–πOPPO—Ä–µ—à–µ–∫!</b></em>üå∞\n\n"
                             "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è, –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤–∏–Ω–∫–∞–º–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ OPPO –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏.\n\n"
                             "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã <em>–∫–æ–ª–æ—Ç—å –æ—Ä–µ—Ö–∏</em>, –∏ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π –¥–æ—Ö–æ–¥!\n\n"
                             "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ <b>–¥—Ä—É–∑—å—è—Ö</b> ‚Äî –ø—Ä–∏–≤–æ–¥–∏—Ç–µ –∏—Ö –≤ –∏–≥—Ä—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ –≤–º–µ—Å—Ç–µ!",
                             reply_markup=main_kb, parse_mode=ParseMode.HTML)
        registration_ref(message.from_user.username, message.from_user.first_name, message.from_user.last_name, int(message.from_user.id), str(command_args))
    except exceptions.TelegramForbiddenError:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")


@dp.callback_query(F.data == "rules")
async def show_rules(callback: types.CallbackQuery):
    await callback.message.answer(f"<em><ins>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</ins></em>\n\n"
                                  f"- –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã –∫–æ–ª–æ—Ç—å –æ—Ä–µ—Ö–∏.\n\n"
                                  f"- <b>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è</b>, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ!\n\n"
                                  f"- –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –∏–≥—Ä—É <b>—Ä–µ–≥—É–ª—è—Ä–Ω–æ</b>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ —è–¥–µ—Ä –æ—Ä–µ—Ö–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏.\n\n"
                                  f"- <b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π</b>, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ.\n\n"
                                  f"- <b>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏</b>, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
                                  parse_mode=ParseMode.HTML, reply_markup=main_kb)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())